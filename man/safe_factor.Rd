% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/safe_factor.R
\name{safe_factor}
\alias{safe_factor}
\alias{safe_ordered}
\title{Set factor levels safely}
\usage{
safe_factor(x = character(), levels, update.case = FALSE, ...)

safe_ordered(x = character(), levels, update.case = FALSE, ...)
}
\arguments{
\item{x}{a vector of data, usually taking a small number of distinct values}

\item{levels}{a vector of unique values}

\item{update.case}{Logical. If `TRUE`, will match without checking case, using the capitalization from the levels parameter for the final output.}

\item{...}{additional arguments passed on to factor() or ordered()}
}
\value{
a factor
}
\description{
The default behavior of `base::factor()` and `base::ordered()` will silently
coerce values to NA if they don't match the provided levels.

These functions call the base functions, but provide an informative error
if any values in the vector don't match a provided level.
}
\examples{

# No error:
teacher_survey |>
  dplyr::mutate(timing = safe_factor(timing, levels = c("Pre", "Post")))

# Mis-typed level generates an error
try(
  teacher_survey |>
    dplyr::mutate(timing = safe_factor(timing, levels = c("Pre", "Pst")))
)

# Use update.case to automatically update levels
teacher_survey |>
  dplyr::mutate(timing = safe_factor(timing, levels = c("pre", "post"),
                                     update.case = TRUE))
}
